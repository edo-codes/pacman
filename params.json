{"name":"Pacman","body":"# README\r\n\r\n## Pacman\r\n\r\nThis is an implementation of the classic game \"Pac-man\", using Python 3.2. It uses the console library for its UI.\r\n\r\n\r\n### Gameplay\r\n\r\nRight now, the enemy logic hasn't been coded yet, only directly chasing the player. You control the player with the arrow keys, you eat the pellets and avoid the enemies.\r\n\r\n### Implementation\r\n\r\nI have attempted to abstract the 'framework' bits from the game to a certain degree so that I might add a sprite-based ui later.\r\n\r\nIt is all written in a single file, so I don't have to switch buffers in vim.\r\n\r\nFirst the game objects are created, such as the player, the ghosts, the pellets etc., all inheriting from a `gameobject` base class. They contain their position, size and color, and game logic for that object.\r\n\r\nThe `steptowards()` method implements a simple pathfinding algorithm that stores a cache -- `pathfindingqueue` -- inside each object that another object routes to. This is so that multiple enemies can chase the player without repeating the calculations in a single step.\r\n\r\nThe `init()`, `gameloop()`, `keypress()` and `draw()` are all methods that are called by the 'framework'. `draw()` uses curses directly and contains the 'drawings' for the objects, which might not be very clean.\r\n\r\nMany methods accept an objects list in a (probably misguided) attempt to make the whole thing a bit more functional (as in functional programming functional).\r\n\r\nThe framework uses the `curses` library. \r\n","tagline":"pacman in curses using python","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}